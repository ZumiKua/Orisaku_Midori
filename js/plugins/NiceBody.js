// Generated by CoffeeScript 1.10.0

/*:
  @plugindesc	Show the nice body of our character and her beautiful clothes.
  @author	ZumiKua
  @param	ORDER
  @desc	The order of the layer.First one is at the bottom.If the elements match
        the equipment type, the layer specified by the note <pic:#{picname}> will
        be displayed. Otherwise the picture with this name will be displayed.
        "express" means express layer.
        Use "|" to split the layer array.
  @default	backhair|nakedbody|Head|Body|fronthair|Accessory
  @param	ACTOR_ID
  @desc	The ID of actor who is displayed.
  @default	1
 */

(function() {
  var _Nicebody_Alias_Scene_Map_createDisplayObjects, _Nicebody_Alias_Scene_Map_update, parameters,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  parameters = PluginManager.parameters('NiceBody');

  _Nicebody_Alias_Scene_Map_createDisplayObjects = this.Scene_Map.prototype.createDisplayObjects;

  this.Scene_Map.prototype.createDisplayObjects = function() {
    _Nicebody_Alias_Scene_Map_createDisplayObjects.apply(this, arguments);
    this.nice_body = new NiceBody();
    return this.addChild(this.nice_body);
  };

  _Nicebody_Alias_Scene_Map_update = this.Scene_Map.prototype.update;

  this.Scene_Map.prototype.update = function() {
    _Nicebody_Alias_Scene_Map_update.apply(this, arguments);
    return this.nice_body.update();
  };

  this.NiceBody = (function(superClass) {
    extend(NiceBody, superClass);

    function NiceBody() {
      var actor_id, elem, j, len, ref, sprite;
      this.constructor.prototype.initialize.call(this);
      this.orders = String(parameters['ORDER'] || "backhair|nakedbody|Head|Body|fronthair|Accessory").split("|");
      actor_id = Number(parameters['ACTOR_ID'] || "1");
      this._actor = $gameActors.actor(actor_id);
      this.x = Graphics.width - 320;
      this.sprites = (function() {
        var j, len, ref, results;
        ref = this.orders;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          elem = ref[j];
          results.push(new Sprite());
        }
        return results;
      }).call(this);
      ref = this.sprites;
      for (j = 0, len = ref.length; j < len; j++) {
        sprite = ref[j];
        sprite.blendMode = PIXI.blendModes.NORMAL;
        this.addChild(sprite);
      }
      this.refresh();
    }

    NiceBody.prototype.generateBitmap = function(elem) {
      var etype, fn, i, j, len, match_result, ref, v;
      fn = elem;
      ref = $dataSystem.equipTypes;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        etype = ref[i];
        if (etype === elem) {
          fn = this._actor.equips()[i - 1].meta.pic;
          break;
        }
      }
      if ((match_result = /v\[(\d+)\]/.exec(elem))) {
        v = Number(match_result[1]);
        if ($gameVariables[v]) {
          fn = "v_" + v + "_" + $gameVariables[v];
        } else {
          fn = "v_" + v + "_0";
        }
      }
      console.log(fn);
      return ImageManager.loadPicture(fn);
    };

    NiceBody.prototype.refresh = function() {
      var elem, i, j, len, ref, results;
      ref = this.orders;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        elem = ref[i];
        results.push(this.sprites[i].bitmap = this.generateBitmap(elem));
      }
      return results;
    };

    return NiceBody;

  })(this.Sprite);

}).call(this);
