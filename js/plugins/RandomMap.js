// Generated by CoffeeScript 1.8.0

/*:
    @plugindesc Generate Map randomly.
    @author IamI
 */

(function() {
  var Point, RandomMapManager;

  Math.randomInt = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  Point = (function() {
    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    return Point;

  })();

  RandomMapManager = function() {
    throw new error("This is a static clss");
  };

  RandomMapManager.constant_surroudings = [[-1, 0], [1, 0], [0, -1], [0, 1]];

  RandomMapManager.constant_pass = 0;

  RandomMapManager.constant_wall = 1;

  RandomMapManager.generateRandomStructureByPrim = function(width, height) {
    var actualHeight, actualWidth, map, mirror, movement, road, starter, starterX, starterY, wall, wallIndex, walls, _i, _len, _ref;
    actualWidth = width * 2 + 1;
    actualHeight = height * 2 + 1;
    map = this.generateArray(actualWidth, actualHeight);
    walls = [];
    starterX = Math.randomInt(1, width - 1);
    starterY = Math.randomInt(1, height - 1);
    starter = new Point(2 * starterX - 1, 2 * starterY - 1);
    map[starter.y][starter.x] = RandomMapManager.constant_pass;
    walls = walls.concat(RandomMapManager.surroundingWalls(starter.x, starter.y, actualWidth, actualHeight, map));
    while (walls.length > 0) {
      wallIndex = Math.randomInt(0, walls.length - 1);
      wall = walls[wallIndex];
      _ref = RandomMapManager.constant_surroudings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        movement = _ref[_i];
        road = new Point(wall.x + movement[0], wall.y + movement[1]);
        if (RandomMapManager.outTheBoard(road.x, road.y, actualWidth, actualHeight)) {
          continue;
        }
        if (map[road.y][road.x] === RandomMapManager.constant_wall) {
          continue;
        }
        mirror = new Point(wall.x - movement[0], wall.y - movement[1]);
        if (RandomMapManager.outTheBoard(mirror.x, mirror.y, actualWidth, actualHeight)) {
          continue;
        }
        if (map[mirror.y][mirror.x] === RandomMapManager.constant_pass) {
          continue;
        }
        map[wall.y][wall.x] = RandomMapManager.constant_pass;
        map[mirror.y][mirror.x] = RandomMapManager.constant_pass;
        walls = walls.concat(RandomMapManager.surroundingWalls(mirror.x, mirror.y, actualWidth, actualHeight, map));
      }
      walls.splice(wallIndex, 1);
    }
    return map;
  };

  RandomMapManager.generateArray = function(width, height) {
    var arr, i, _i;
    arr = [];
    for (i = _i = 1; 1 <= height ? _i <= height : _i >= height; i = 1 <= height ? ++_i : --_i) {
      arr.push(new Array(width).fill(RandomMapManager.constant_wall));
    }
    return arr;
  };

  RandomMapManager.outTheBoard = function(x, y, width, height) {
    if (x <= 0 || x >= width - 1) {
      return true;
    }
    if (y <= 0 || y >= height - 1) {
      return true;
    }
    return false;
  };

  RandomMapManager.isLegalWall = function(x, y, width, height, map) {
    if (RandomMapManager.outTheBoard(x, y, width, height, map)) {
      return false;
    }
    return map[y][x] === RandomMapManager.constant_wall;
  };

  RandomMapManager.surroundingWalls = function(x, y, width, height, map) {
    var arr;
    arr = [];
    if (RandomMapManager.isLegalWall(x - 1, y, width, height, map)) {
      arr.push(new Point(x - 1, y));
    }
    if (RandomMapManager.isLegalWall(x + 1, y, width, height, map)) {
      arr.push(new Point(x + 1, y));
    }
    if (RandomMapManager.isLegalWall(x, y - 1, width, height, map)) {
      arr.push(new Point(x, y - 1));
    }
    if (RandomMapManager.isLegalWall(x, y + 1, width, height, map)) {
      arr.push(new Point(x, y + 1));
    }
    return arr;
  };

  console.log(RandomMapManager.generateRandomStructureByPrim(10, 10));

}).call(this);
