// Generated by CoffeeScript 1.8.0

/*:
    @plugindesc Add a hint when you get item.
    @author IamI
 */

(function() {
  var Window_GainItem, _GainItemHint_Alias_Game_Interpreter_Command125, _GainItemHint_Alias_Game_Interpreter_Command126, _GainItemHint_Alias_Game_Interpreter_Command127, _GainItemHint_Alias_Game_Interpreter_Command128,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Window_GainItem = (function(_super) {
    __extends(Window_GainItem, _super);

    function Window_GainItem() {
      this.initialize.call(this);
      this.datas = [];
      this.counts = {};
    }

    Window_GainItem.prototype.addItem = function(itemId, count) {
      var item;
      item = $dataItems[itemId];
      this.datas.push(item);
      return this.addToCount(item, count);
    };

    Window_GainItem.prototype.addWeapon = function(weaponId) {
      var weapon;
      weapon = $dataWeapons[weaponId];
      this.datas.push(weapon);
      return this.addToCount(weapon, count);
    };

    Window_GainItem.prototype.addArmor = function(armorId) {
      var armor;
      armor = $dataArmors[armorId];
      this.datas.push(armor);
      return this.addToCount(armor, count);
    };

    Window_GainItem.prototype.addToCount = function(item, count) {
      if (!this.counts[item]) {
        this.counts[item] = 0;
      }
      return this.counts[item] += count;
    };

    Window_GainItem.prototype.refresh = function() {
      var data, height, order, width, x, y, _i, _len, _ref, _results;
      width = 400;
      height = this.datas.length * this.lineHeight() + this.standardPadding() * 2;
      x = (Graphics.boxWidth - width) / 2;
      y = (Graphics.boxHeight - height) / 2;
      this.move(x, y, width, height);
      this.createContents();
      order = 0;
      _ref = this.datas;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        this.drawItemName(data, this.textPadding(), order * this.lineHeight(), width - this.contents.width);
        _results.push(order += 1);
      }
      return _results;
    };

    return Window_GainItem;

  })(Window_Base);

  _GainItemHint_Alias_Game_Interpreter_Command125 = Game_Interpreter.prototype.command125;

  _GainItemHint_Alias_Game_Interpreter_Command126 = Game_Interpreter.prototype.command126;

  _GainItemHint_Alias_Game_Interpreter_Command127 = Game_Interpreter.prototype.command127;

  _GainItemHint_Alias_Game_Interpreter_Command128 = Game_Interpreter.prototype.command128;

  Game_Interpreter.prototype.command126 = function() {
    var result, value;
    result = _GainItemHint_Alias_Game_Interpreter_Command126.call(this);
    this.checkGainHintWindow();
    value = this.operateValue(this._params[1], this._params[2], this._params[3]);
    this.gainItemHintWindow.addItem(this._params[0], value);
    if (!this.nextCommandIsItem()) {
      this.showGainHintWindow();
    }
    return result;
  };

  Game_Interpreter.prototype.command127 = function() {
    var result, value;
    result = _GainItemHint_Alias_Game_Interpreter_Command127.call(this);
    this.checkGainHintWindow();
    value = this.operateValue(this._params[1], this._params[2], this._params[3]);
    this.gainItemHintWindow.addWeapon(this._params[0], value);
    if (!this.nextCommandIsItem()) {
      this.showGainHintWindow();
    }
    return result;
  };

  Game_Interpreter.prototype.command128 = function() {
    var result, value;
    result = _GainItemHint_Alias_Game_Interpreter_Command128.call(this);
    this.checkGainHintWindow();
    value = this.operateValue(this._params[1], this._params[2], this._params[3]);
    this.gainItemHintWindow.addArmor(this._params[0], value);
    if (!this.nextCommandIsItem()) {
      this.showGainHintWindow();
    }
    return result;
  };

  Game_Interpreter.prototype.nextCommandIsItem = function() {
    var code;
    code = this.nextEventCode();
    if (code === 126 || code === 127 || code === 128) {
      return true;
    }
    return false;
  };

  Game_Interpreter.prototype.checkGainHintWindow = function() {
    if (!this.gainItemHintWindow) {
      return this.gainItemHintWindow = new Window_GainItem;
    }
  };

  Game_Interpreter.prototype.showGainHintWindow = function() {
    this.checkGainHintWindow();
    this.gainItemHintWindow.refresh();
    this.gainItemHintWindow.openness = 0;
    SceneManager._scene.addChild(this.gainItemHintWindow);
    return this.gainItemHintWindow.open();
  };

  Game_Interpreter.prototype.terminateGainHintWindow = function() {
    this.gainItemHintWindow = null;
    return SceneManager._scene.removeChild(this.gainItemHintWindow);
  };

}).call(this);
