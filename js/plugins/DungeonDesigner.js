// Generated by CoffeeScript 1.8.0

/*:
    @plugindesc Help design a Dungeon
    @author IamI

    @param EnemyMap
    @default 7
    @desc Enemy map ID.
 */

(function() {
  var DungeonDesignerParameters, Game_Dungeon, Scene_Dungeon, Window_DungeonHint, Window_DungeonMenu, Window_ItemUseList, Window_PutEnemyEvent, _DungeonDesigner_Alias_Game_Interpreter_command301, _DungeonDesigner_Alias_Scene_Map_createAllWindows, _DungeonDesigner_Alias_Scene_Map_onMapLoaded, _DungeonDesigner_Alias_Scene_Map_update,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _DungeonDesigner_Alias_Scene_Map_createAllWindows = Scene_Map.prototype.createAllWindows;

  _DungeonDesigner_Alias_Scene_Map_update = Scene_Map.prototype.update;

  _DungeonDesigner_Alias_Scene_Map_onMapLoaded = Scene_Map.prototype.onMapLoaded;

  _DungeonDesigner_Alias_Game_Interpreter_command301 = Game_Interpreter.prototype.command301;

  DungeonDesignerParameters = PluginManager.parameters("DungeonDesigner");

  Input.keyMapper[121] = 'dungeon';

  Game_Dungeon = (function() {
    function Game_Dungeon() {
      this._isDesigningDungeon = false;
    }

    Game_Dungeon.prototype.start = function() {
      var target;
      target = $gameParty.members()[0];
      this._mapId = $gameMap._mapId;
      this._hp = target.mhp;
      this._maxhp = target.mhp;
      this._mp = target.mmp;
      this._maxmp = target.mmp;
      this._isDesigningDungeon = true;
      this._usedItems = {};
      this._usedSkills = {};
      this._states = [];
      this._extraEvents = [];
      return this.loadMap();
    };

    Game_Dungeon.prototype.terminate = function() {
      return this._isDesigningDungeon = false;
    };

    Game_Dungeon.prototype.loadMap = function() {
      var $enemyZoo, fileName, id;
      id = parseInt(DungeonDesignerParameters.EnemyMap).padZero(3);
      fileName = "Map" + id + ".json";
      $enemyZoo = null;
      return DataManager.loadDataFile('$enemyZoo', fileName);
    };

    Game_Dungeon.prototype.preloadCharacters = function() {
      var event, _i, _len, _ref, _results;
      if (!$enemyZoo) {
        return;
      }
      _ref = $enemyZoo.events;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        if (event === null) {
          continue;
        }
        _results.push(ImageManager.loadCharacter(event.pages[0].image.characterName));
      }
      return _results;
    };

    Game_Dungeon.prototype.putEvent = function(eventIndex) {
      var dir, event, targetvent, x, y;
      event = $enemyZoo.events[eventIndex];
      dir = [null, [-1, 1], [0, 1], [1, 1], [-1, 0], [0, 0], [0, 1], [1, -1], [1, 0], [1, 1]][$gamePlayer.direction()];
      x = $gamePlayer.x + dir[0];
      y = $gamePlayer.y + dir[1];
      console.log(x, y);
      targetvent = {
        id: $dataMap.events.length + this._extraEvents.length,
        meta: event.meta,
        name: event.name,
        note: event.note,
        pages: event.pages,
        x: x,
        y: y
      };
      return this._extraEvents.push(targetvent);
    };

    Game_Dungeon.prototype.battle = function(troop) {};

    Game_Dungeon.prototype.useItem = function(itemIndex) {
      var item;
      item = $dataItems[itemIndex];
      if (!this._usedItems[itemIndex]) {
        this._usedItems[itemIndex] = 0;
      }
      return this._usedItems[itemIndex] += 1;
    };

    Game_Dungeon.prototype.useSkill = function(skillIndex) {
      var skill;
      skill = $dataSkills[skillIndex];
      if (!this._usedSkills[skillIndex]) {
        this._usedSkills[skillIndex] = 0;
      }
      return this._usedSkills[skillIndex] += 1;
    };

    return Game_Dungeon;

  })();

  this.$gameDungeon = new Game_Dungeon();

  Scene_Map.prototype.isDungeonCalled = function() {
    return Input.isTriggered('dungeon') && $gameTemp.isPlaytest();
  };

  Scene_Map.prototype.startDungeon = function() {
    $gameDungeon.start();
    return this.createDungeonHintWindow();
  };

  Scene_Map.prototype.finishDungeon = function() {
    $gameDungeon._isDesigningDungeon = false;
    return this.removeChild(this._dungeonHintWindow);
  };

  Scene_Map.prototype.createDungeonHintWindow = function() {
    this._dungeonHintWindow = new Window_DungeonHint();
    return this.addWindow(this._dungeonHintWindow);
  };

  Scene_Map.prototype.callDungeonMenu = function() {
    return SceneManager.push(Scene_Dungeon);
  };

  Scene_Map.prototype.dungeonPressed = function() {
    if ($gameDungeon._isDesigningDungeon) {
      return this.callDungeonMenu();
    } else {
      return this.startDungeon();
    }
  };

  Scene_Map.prototype.onMapLoaded = function() {
    if ($gameMap._mapId === $gameDungeon._mapId) {
      $dataMap.events = $dataMap.events.concat($gameDungeon._extraEvents);
      $gameMap.setupEvents();
      console.log($dataMap.events, $gameDungeon._extraEvents);
    }
    return _DungeonDesigner_Alias_Scene_Map_onMapLoaded.call(this);
  };

  Scene_Map.prototype.createAllWindows = function() {
    _DungeonDesigner_Alias_Scene_Map_createAllWindows.call(this);
    if ($gameDungeon._isDesigningDungeon) {
      return this.createDungeonHintWindow();
    }
  };

  Scene_Map.prototype.update = function() {
    _DungeonDesigner_Alias_Scene_Map_update.call(this);
    if (this.isDungeonCalled()) {
      return this.dungeonPressed();
    }
  };

  Game_Interpreter.prototype.command301 = function() {
    var troopId;
    if ($gameDungeon._isDesigningDungeon) {
      if (this._params[0] === 0) {
        troopId = this._params[1];
      } else if (this._params[0] === 1) {
        troopId = $gameVariables.value(this._params[1]);
      } else {
        troopId = $gamePlayer.makeEncounterTroopId();
      }
      $gameDungeon.battle(troopId);
      return true;
    } else {
      return _DungeonDesigner_Alias_Game_Interpreter_command301.call(this);
    }
  };

  Window_Base.prototype.drawCharacter = function(characterName, characterIndex, x, y, px, py) {
    var big, bitmap, n, ph, pw, sx, sy;
    px = px || 1;
    py = py || 0;
    bitmap = ImageManager.loadCharacter(characterName);
    big = ImageManager.isBigCharacter(characterName);
    pw = bitmap.width / (big ? 3 : 12);
    ph = bitmap.height / (big ? 4 : 8);
    n = characterIndex;
    sx = (n % 4 * 3 + px) * pw;
    sy = (Math.floor(n / 4) * 4 + py) * ph;
    return this.contents.blt(bitmap, sx, sy, pw, ph, x - pw / 2, y - ph);
  };

  Window_DungeonHint = (function(_super) {
    __extends(Window_DungeonHint, _super);

    function Window_DungeonHint() {
      var height, itemLength, skillLength, width, x, y;
      width = 350;
      itemLength = Object.keys($gameDungeon._usedItems).length;
      skillLength = Object.keys($gameDungeon._usedSkills).length;
      height = this.lineHeight() * (2 + itemLength + skillLength) + this.standardPadding() * 2;
      x = Graphics.boxWidth - width;
      y = 0;
      this.initialize.call(this, x, y, width, height);
      this.refresh();
    }

    Window_DungeonHint.prototype.refresh = function() {
      var index, item, itemIndex, skill, skillIndex, y, _i, _j, _len, _len1, _ref, _ref1, _results;
      this.contents.drawText(" 当前 HP " + $gameDungeon._hp + " / " + $gameDungeon._maxhp, 0, 0, this.contents.width, this.lineHeight());
      this.contents.drawText(" 当前 MP " + $gameDungeon._mp + " / " + $gameDungeon._maxmp, 0, this.lineHeight(), this.contents.width, this.lineHeight());
      index = 2;
      _ref = Object.keys($gameDungeon._usedItems);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        itemIndex = _ref[_i];
        item = $dataItems[itemIndex];
        y = index * this.lineHeight();
        this.drawItemName(item, 0, y, this.contents.width);
        this.contents.drawText($gameDungeon._usedItems[itemIndex].toString(), 0, y, this.contents.width, this.lineHeight(), 'right');
        index += 1;
      }
      _ref1 = Object.keys($gameDungeon._usedSkills);
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        skillIndex = _ref1[_j];
        skill = $dataSkills[skillIndex];
        y = index * this.lineHeight();
        this.drawItemName(skill, 0, y, this.contents.width);
        this.contents.drawText($gameDungeon._usedSkills[skillIndex].toString(), 0, y, this.contents.width, this.lineHeight(), 'right');
        _results.push(index += 1);
      }
      return _results;
    };

    return Window_DungeonHint;

  })(Window_Base);

  Scene_Dungeon = (function(_super) {
    __extends(Scene_Dungeon, _super);

    function Scene_Dungeon() {
      this.initialize.call(this);
      $gameDungeon.preloadCharacters();
      this.state = 'command';
    }

    Scene_Dungeon.prototype.create = function() {
      Scene_MenuBase.prototype.create.call(this);
      return this.createWindows();
    };

    Scene_Dungeon.prototype.createWindows = function() {
      this.createCommandWindow();
      this.createItemWindow();
      return this.createEventWindow();
    };

    Scene_Dungeon.prototype.createCommandWindow = function() {
      this._commandWindow = new Window_DungeonMenu();
      this._windowLayer.addChild(this._commandWindow);
      this._commandWindow.setHandler('event', this.commandEvent.bind(this));
      this._commandWindow.setHandler('item', this.commandItem.bind(this));
      this._commandWindow.setHandler('skill', this.commandSkill.bind(this));
      this._commandWindow.setHandler('exit', this.commandExit.bind(this));
      this._commandWindow.setHandler('saveMap', this.commandSaveMap.bind(this));
      return this._commandWindow.setHandler('cancel', this.cancelCommand.bind(this));
    };

    Scene_Dungeon.prototype.createEventWindow = function() {
      this._eventWindow = new Window_PutEnemyEvent();
      this._eventWindow.openness = 0;
      this._eventWindow.setHandler('ok', this.useEvent.bind(this));
      this._eventWindow.setHandler('cancel', this.cancelEvent.bind(this));
      return this._windowLayer.addChild(this._eventWindow);
    };

    Scene_Dungeon.prototype.createItemWindow = function() {
      this._itemWindow = new Window_ItemUseList($dataSkills);
      this._itemWindow.openness = 0;
      this._itemWindow.setHandler('ok', this.useObject.bind(this));
      this._itemWindow.setHandler('cancel', this.cancelItem.bind(this));
      return this._windowLayer.addChild(this._itemWindow);
    };

    Scene_Dungeon.prototype.commandEvent = function() {
      return this.switchState('event');
    };

    Scene_Dungeon.prototype.commandItem = function() {
      return this.switchState('item');
    };

    Scene_Dungeon.prototype.commandSkill = function() {
      return this.switchState('skill');
    };

    Scene_Dungeon.prototype.commandSaveMap = function() {
      var backupFileName, dirname, fileName, fs, mapData, mapId;
      mapId = $gameMap.mapId();
      dirname = window.location.pathname.replace(/(\/www|)\/[^\/]*$/, '/');
      fileName = dirname + 'data/Map' + mapId.padZero(3) + '.json';
      console.log(fileName);
      backupFileName = fileName + '.bac';
      fs = require('fs');
      fs.renameSync(fileName, backupFileName);
      mapData = JSON.stringify($dataMap);
      fs.writeFileSync(fileName, mapData);
      return SceneManager.pop();
    };

    Scene_Dungeon.prototype.commandExit = function() {
      $gameDungeon.terminate();
      return SceneManager.pop();
    };

    Scene_Dungeon.prototype.cancelEvent = function() {
      return this.switchState('command');
    };

    Scene_Dungeon.prototype.cancelItem = function() {
      return this.switchState('command');
    };

    Scene_Dungeon.prototype.cancelCommand = function() {
      return SceneManager.pop();
    };

    Scene_Dungeon.prototype.useEvent = function() {
      $gameDungeon.putEvent(this._eventWindow.index() + 1);
      return SceneManager.pop();
    };

    Scene_Dungeon.prototype.useObject = function() {
      if (this.state === 'item') {
        return this.useItem();
      } else if (this.state === 'skill') {
        return this.useSkill();
      }
    };

    Scene_Dungeon.prototype.useItem = function() {
      $gameDungeon.useItem(this._itemWindow.index() + 1);
      return SceneManager.pop();
    };

    Scene_Dungeon.prototype.useSkill = function() {
      $gameDungeon.useSkill(this._itemWindow.index() + 1);
      return SceneManager.pop();
    };

    Scene_Dungeon.prototype.switchState = function(state) {
      switch (state) {
        case 'event':
          this._eventWindow.activate();
          this._eventWindow.open();
          this._eventWindow.select(0);
          this._commandWindow.close();
          break;
        case 'item':
          this._itemWindow.list = $dataItems;
          this._itemWindow.open();
          this._itemWindow.select(0);
          this._itemWindow.activate();
          this._commandWindow.close();
          break;
        case 'skill':
          this._itemWindow.list = $dataSkills;
          this._itemWindow.open();
          this._itemWindow.select(0);
          this._itemWindow.activate();
          this._commandWindow.close();
          break;
        case 'command':
          this._itemWindow.close();
          this._eventWindow.close();
          this._commandWindow.open();
          this._commandWindow.activate();
      }
      return this.state = state;
    };

    Scene_Dungeon.prototype.update = function() {
      Scene_MenuBase.prototype.update.call(this);
      return this.updateKeys();
    };

    Scene_Dungeon.prototype.updateKeys = function() {
      if (Input.isTriggered('cancel')) {
        if (this.state === 'command') {
          return SceneManager.pop();
        } else {
          return this.switchState('command');
        }
      }
    };

    return Scene_Dungeon;

  })(Scene_MenuBase);

  Window_DungeonMenu = (function(_super) {
    __extends(Window_DungeonMenu, _super);

    function Window_DungeonMenu() {
      this.initialize.call(this);
      this.x = (Graphics.boxWidth - this.width) / 2;
      this.y = (Graphics.boxHeight - this.height) / 2;
    }

    Window_DungeonMenu.prototype.makeCommandList = function() {
      this.addCommand("在面前放置事件", 'event');
      this.addCommand("使用物品", 'item');
      this.addCommand("使用技能", 'skill');
      this.addCommand("生成敌机地图", "createMap", false);
      this.addCommand("保存当前地图", "saveMap");
      return this.addCommand("退出设计模式", 'exit');
    };

    return Window_DungeonMenu;

  })(Window_Command);

  Window_PutEnemyEvent = (function(_super) {
    __extends(Window_PutEnemyEvent, _super);

    function Window_PutEnemyEvent() {
      var height, width, x, y;
      width = this.windowWidth();
      height = this.windowHeight();
      x = (Graphics.boxWidth - width) / 2;
      y = (Graphics.boxHeight - height) / 2;
      this.initialize.call(this, x, y, width, height);
      this.refresh();
      this._order = 0;
      this._count = 0;
    }

    Window_PutEnemyEvent.prototype.drawItem = function(index, order) {
      var event, image, rect;
      order = order || 0;
      event = $enemyZoo.events[index + 1];
      if (!event) {
        return;
      }
      image = event.pages[0].image;
      rect = this.itemRect(index);
      return this.drawCharacter(image.characterName, image.characterIndex, rect.x + this.itemWidth() / 2, rect.y + this.itemHeight(), 0, order);
    };

    Window_PutEnemyEvent.prototype.maxItems = function() {
      if (!$enemyZoo) {
        return 1;
      }
      return Math.max(1, $enemyZoo.events.length - 1);
    };

    Window_PutEnemyEvent.prototype.itemWidth = function() {
      return 40;
    };

    Window_PutEnemyEvent.prototype.itemHeight = function() {
      return 60;
    };

    Window_PutEnemyEvent.prototype.maxCols = function() {
      return 8;
    };

    Window_PutEnemyEvent.prototype.maxRowsDefining = function() {
      return 4;
    };

    Window_PutEnemyEvent.prototype.windowWidth = function() {
      return (this.itemWidth() + this.spacing()) * this.maxCols() + 2 * this.standardPadding();
    };

    Window_PutEnemyEvent.prototype.windowHeight = function() {
      return (this.itemHeight() + this.spacing()) * this.maxRowsDefining() + 2 * this.standardPadding();
    };

    Window_PutEnemyEvent.prototype.update = function() {
      Window_Selectable.prototype.update.call(this);
      if (this.active && this._index >= 0) {
        this._count += 1;
        if (this._count >= 5) {
          this._count -= 5;
          this._order = (this._order + 1) % 4;
          return this.redrawItem(this._index, this._order);
        }
      }
    };

    Window_PutEnemyEvent.prototype.redrawItem = function(index, order) {
      if (index < 0) {
        return;
      }
      this.clearItem(index);
      return this.drawItem(index, order || 0);
    };

    Window_PutEnemyEvent.prototype.select = function(index) {
      if (this._index >= 0) {
        this.redrawItem(this._index, 0);
      }
      return Window_Selectable.prototype.select.call(this, index);
    };

    return Window_PutEnemyEvent;

  })(Window_Selectable);

  Window_ItemUseList = (function(_super) {
    __extends(Window_ItemUseList, _super);

    function Window_ItemUseList(list) {
      var height, width, x, y;
      this._list = list;
      width = 282;
      height = 392;
      x = (Graphics.boxWidth - width) / 2;
      y = (Graphics.boxHeight - height) / 2;
      this.initialize.call(this, x, y, width, height);
      this.refresh();
    }

    Window_ItemUseList.prototype.drawItem = function(index) {
      var item, rect;
      if (!this._list) {
        return;
      }
      item = this._list[index + 1];
      if (!item) {
        return;
      }
      rect = this.itemRect(index);
      return this.drawItemName(item, rect.x, rect.y, this.contents.width);
    };

    Window_ItemUseList.prototype.maxItems = function() {
      if (!this._list) {
        return 1;
      }
      return this._list.length - 1;
    };

    Window_ItemUseList.prototype.getList = function() {
      return this._list;
    };

    Window_ItemUseList.prototype.setList = function(value) {
      this._list = value;
      this.select(0);
      return this.refresh();
    };

    Object.defineProperty(Window_ItemUseList.prototype, 'list', {
      get: Window_ItemUseList.prototype.getList,
      set: Window_ItemUseList.prototype.setList
    });

    return Window_ItemUseList;

  })(Window_Selectable);

}).call(this);
