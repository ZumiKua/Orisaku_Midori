// Generated by CoffeeScript 1.8.0

/*:
    @plugindesc Add Magic Stone to the database.
    @author IamI

    @param skillFactorInfluence
    @default times
    @desc Decide how magic stone influence the cost of the skill.
    'nothing', 'add', 'times' or 'replace'

    @param overEnergy
    @default destroy
    @desc Decide what will the game do when too much skills is put in the stone.
    'destroy' or 'hint'

    @param showEnergyNumber
    @default no
    @desc Decide show the number or progress bar of energy when magic stone is shown.
    'yes' or 'no'

    @param showProficiencyNumber
    @default no
    @desc Decide show the number or progress bar of proficiency when magic stone is showm.
    'yes' or 'no'

    @param showContentWhenTransfer
    @default none
    @desc Decide show what content for target skill in new magic stone when transferring.
    'energy', 'mp', 'both' or 'none'

    @help
    skillFactorInfluence:
    + 'nothing' for no influence.
    + 'add' will add the magic stone 'magicFactor' on skill cost.
    + 'times' will time the magic stone 'magicFactor' on skill cost, then ceil the number.
    + 'replace' will use the magic stone 'magicFactor' number as the skill cost. 
    + the default is 'times'.

    overEnergy
    + 'destroy' will remove the magic stone.
    + 'hint' will bounce a hint to the player.
    + the default is 'destroy'.

    showContentWhenTransfer
    + 'none' for show nothing when transfer. Neither will the help window shows.
    + 'mp' will show the new mp cost in the new magic stone.
    + 'energy' will show then energy cost in the new magic stone.
      if showEnergyNumber is set no, it will show the predicted energy progress bar.
    + 'both' will show both the mp and energy.
 */

(function() {
  var MagicStone, Window_StoneHelp, Window_StoneList, Window_TransferSkillHelp, Window_TransferSkillList,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Game_Party.prototype._MagicStone_Alias_initAllItems = Game_Party.prototype.initAllItems;

  Game_Interpreter.prototype._MagicStone_Alias_pluginCommand = Game_Interpreter.prototype.pluginCommand;

  MagicStone = (function() {
    function MagicStone(name, level, factor, skills, maxEnergy, proficiency, maxProficiency) {
      var skill_id, _i, _len, _ref;
      this._name = name;
      this._level = level;
      this._magicFactor = factor;
      this._skills = skills;
      this._maxEnergy = maxEnergy;
      this._energy = 0;
      this._proficiency = proficiency;
      this._maxProficiency = maxProficiency;
      _ref = this._skills;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        skill_id = _ref[_i];
        this._energy += this.energyCost(skill_id);
      }
    }

    MagicStone.prototype.mpCost = function(skill) {
      var origin;
      origin = skill.mpCost;
      switch (PluginManager.paramteres('skillFactorInfluence')) {
        case 'nothing':
          return origin;
        case 'add':
          return Math.ceil(origin + this._magicFactor);
        case 'times':
          return Math.ceil(origin * this._magicFactor);
        case 'replace':
          return Math.ceil(this._magicFactor);
        default:
          return Math.ceil(origin * this._magicFactor);
      }
    };

    MagicStone.prototype.energyCost = function(skill_id) {
      var data, skill;
      skill = $dataSkills[skill_id];
      data = skill.meta.energyCost;
      if (data === null || data === void 0) {
        return 0;
      }
      return parseInt(data);
    };

    MagicStone.prototype.transfer = function(skill) {
      var cost;
      cost = energyCost(skill);
      if (this._energy + cost > this._maxEnergy) {
        return false;
      } else {
        this._energy += cost;
        this._skill.push(skill);
        return true;
      }
    };

    MagicStone.prototype.proficiencyRatio = function() {
      return this._proficiency / this._maxProficiency;
    };

    MagicStone.prototype.energyRatio = function() {
      return this._energy / this._maxEnergy;
    };

    return MagicStone;

  })();

  Game_Party.prototype.initAllItems = function() {
    this._MagicStone_Alias_initAllItems();
    return this._magicStones = [];
  };

  Game_Party.prototype.magicStones = function() {
    return this._magicStones;
  };

  Game_Party.prototype.generateMagicStoneRandomly = function(minLevel, maxLevel) {};

  Game_Party.prototype.generateMagicStoneFromItem = function(itemIndex) {
    var factor, item, level, maxEnergy, maxProficiency, name, proficiency, skills, skillsString;
    item = $dataItems[itemIndex];
    name = item.name;
    skillsString = item.meta.skills || "[]";
    skills = eval(skillsString);
    level = parseInt(item.meta.level || "1");
    factor = parseInt(item.meta.factor || "1");
    maxEnergy = parseInt(item.meta.maxEnergy || "5");
    proficiency = parseInt(item.meta.proficiency || "0");
    maxProficiency = parseInt(item.meta.maxProficiency || "100");
    return new MagicStone(name, level, factor, skills, maxEnergy, proficiency, maxProficiency);
  };

  this.Spriteset_Progressbar = (function(_super) {
    __extends(Spriteset_Progressbar, _super);

    function Spriteset_Progressbar() {
      this.initialize.call(this);
      this.bitmap = ImageManager.loadSystem("EnergybarBackground");
      this.forebitmap = ImageManager.loadSystem("EnergybarForeground");
      this.foreground = new Sprite();
      this.foreground.bitmap = this.forebitmap;
      this.addChild(this.foreground);
      this.value = 0.0;
    }

    Spriteset_Progressbar.prototype.setForebitmap = function() {
      this.forebitmap = new Bitmap(this.bitmap.width, this.bitmap.height);
      return this.foreground.bitmap = this.forebitmap;
    };

    Spriteset_Progressbar.prototype.refresh = function() {
      var height, width;
      if (!this.bitmap.isReady()) {
        this.bitmap.addLoadListener(this.refresh.bind(this));
        return;
      }
      width = Math.ceil(this.bitmap.width * this.value);
      height = this.bitmap.height;
      return this.foreground.scale.x = this.value;
    };

    Spriteset_Progressbar.prototype.setValue = function(value) {
      console.log(value);
      this.value = value;
      return this.refresh();
    };

    return Spriteset_Progressbar;

  })(this.Sprite);

  Window_Base.prototype.drawTextOnLine = function(line, text, align, x_move) {
    var height, width, x, y;
    x = this.textPadding();
    y = this.lineHeight() * line;
    width = this.contents.width - this.textPadding() * 2;
    height = this.lineHeight();
    if (x_move !== void 0) {
      x += Math.floor(width * x_move);
    }
    return this.contents.drawText(text, x, y, width, height, align);
  };

  Window_StoneList = (function(_super) {
    __extends(Window_StoneList, _super);

    function Window_StoneList(x, y) {
      this.initialize.call(this, x, y, this.windowWidth(), this.windowHeight());
      this.refresh();
    }

    Window_StoneList.prototype.drawItem = function(index) {
      var rect, stone;
      stone = this.magicStoneAtIndex(index);
      if (stone === null || stone === void 0) {
        return;
      }
      rect = this.itemRectForText(index);
      return this.contents.drawText(stone._name, rect.x, rect.y, rect.width, rect.height, 'left');
    };

    Window_StoneList.prototype.magicStoneAtIndex = function(index) {
      return $gameParty.magicStones()[index];
    };

    Window_StoneList.prototype.maxItems = function(index) {
      return Math.max(1, $gameParty.magicStones().length);
    };

    Window_StoneList.prototype.updateHelp = function() {
      return this.setHelpWindowItem(this.magicStoneAtIndex(this._index));
    };

    Window_StoneList.prototype.windowWidth = function() {
      return Graphics.width / 2;
    };

    Window_StoneList.prototype.windowHeight = function() {
      return 340;
    };

    Window_StoneList.prototype.createHelpWindow = function() {
      this._helpWindow = new Window_StoneHelp(0);
      return this.addChild(this._helpWindow);
    };

    return Window_StoneList;

  })(this.Window_Selectable);

  Window_StoneHelp = (function(_super) {
    __extends(Window_StoneHelp, _super);

    function Window_StoneHelp(windowX) {
      var windowHeight, windowY;
      windowHeight = this.lineHeight() * 7 + 32;
      windowY = Graphics.boxHeight - windowHeight;
      this.initialize.call(this, windowX, windowY, Graphics.width / 2, windowHeight);
      this.stone = null;
      if (PluginManager.parameters('showProficiencyNumber') !== 'yes') {
        this.proficiencyProgressBar = this.createPreogressBar(1);
      }
      if (PluginManager.parameters('showEnergyNumber') !== 'yes') {
        this.energyProgressBar = this.createPreogressBar(2);
      }
    }

    Window_StoneHelp.prototype.createPreogressBar = function(line) {
      var bar;
      bar = new Spriteset_Progressbar();
      bar.y = this.lineHeight() * line + 20;
      bar.x = this.width / 2;
      bar.visible = false;
      return this.addChild(bar);
    };

    Window_StoneHelp.prototype.refresh = function() {
      var i, line, skill, skillID, _i, _ref, _results;
      this.contents.clear();
      if (this.stone === null || this.stone === void 0) {
        return;
      }
      this.drawTextOnLine(0, this.stone._name, 'left');
      this.drawTextOnLine(0, this.stone._level, 'right');
      this.drawTextOnLine(1, "熟练度", 'left');
      if (PluginManager.parameters('showProficiencyNumber') === 'yes') {
        cosnole.log("" + this.stone._proficiency + " / " + this.stone._maxProficiency);
        this.drawTextOnLine(1, "" + this.stone._proficiency + " / " + this.stone._maxProficiency);
      } else {
        this.proficiencyProgressBar.visible = true;
        this.proficiencyProgressBar.setValue(this.stone.proficiencyRatio());
      }
      if (PluginManager.parameters('showEnergyNumber') === 'yes') {
        this.drawTextOnLine(1, "" + this.stone._energy + " / " + this.stone._maxEnergy);
      } else {
        this.energyProgressBar.visible = true;
        this.energyProgressBar.setValue(this.stone.energyRatio());
      }
      this.drawTextOnLine(2, "能量", "left");
      if (this.stone._skills.length === 0) {
        return this.drawTextOnLine(4, "没有技能", 'center');
      } else {
        _results = [];
        for (i = _i = 0, _ref = this.stone._skills.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          line = 3 + Math.floor(i / 2);
          skillID = this.stone._skills[i];
          skill = $dataSkills[skillID];
          _results.push(this.drawTextOnLine(line, skill.name, 'left', (i % 2) / 2));
        }
        return _results;
      }
    };

    Window_StoneHelp.prototype.setItem = function(item) {
      this.stone = item;
      return this.refresh();
    };

    return Window_StoneHelp;

  })(this.Window_Base);

  Window_TransferSkillList = (function(_super) {
    __extends(Window_TransferSkillList, _super);

    function Window_TransferSkillList() {
      this.initialize.call(this);
    }

    Window_TransferSkillList.prototype.updateHelp = function() {};

    return Window_TransferSkillList;

  })(Window_Selectable);

  Window_TransferSkillHelp = (function(_super) {
    __extends(Window_TransferSkillHelp, _super);

    function Window_TransferSkillHelp() {
      this.initialize.call(this);
    }

    return Window_TransferSkillHelp;

  })(Window_Base);

  this.Scene_Transfer = (function(_super) {
    __extends(Scene_Transfer, _super);

    function Scene_Transfer() {
      this.initialize.call(this);
    }

    Scene_Transfer.prototype.start = function() {
      return Scene_Base.prototype.start.call(this);
    };

    Scene_Transfer.prototype.create = function() {
      this.createWindowLayer();
      this.createWindows();
      return this.switchState('from');
    };

    Scene_Transfer.prototype.createWindows = function() {
      this.fromStoneListWindow = new Window_StoneList(0, 0);
      this.toStoneListWindow = new Window_StoneList(Graphics.width / 2, 0);
      this.fromStoneListWindow.createHelpWindow();
      this.toStoneListWindow.createHelpWindow();
      this.skillListWindow = new Window_TransferSkillList;
      this.skillHelpWindow = new Window_TransferSkillHelp;
      this.addWindow(this.fromStoneListWindow);
      return this.addWindow(this.toStoneListWindow);
    };

    Scene_Transfer.prototype.update = function() {
      return Scene_Base.prototype.update.call(this);
    };

    Scene_Transfer.prototype.switchState = function(state) {
      switch (state) {
        case 'from':
          this.fromStoneListWindow.activate();
          return this.toStoneListWindow.deactivate();
      }
    };

    return Scene_Transfer;

  })(this.Scene_Base);

  Game_Interpreter.prototype.pluginCommand = function(command, args) {
    var id, idString;
    this._MagicStone_Alias_pluginCommand(command, args);
    if (command === 'MagicStone') {
      switch (args[0]) {
        case 'test':
          return $gameParty.magicStones().push(new MagicStone("简单的石头", 1, 1, [1, 2, 3, 4, 5], 100, 60, 100));
        case 'fromItem':
          idString = args[1];
          if (idString === void 0 || idString === null) {
            throw new exception('create magic stone from item with no id');
          }
          id = parseInt(idString);
          return $gameParty.magicStones().push($gameParty.generateMagicStoneFromItem(id));
      }
    }
  };

}).call(this);
